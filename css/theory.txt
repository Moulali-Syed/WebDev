CSS - cascading style sheets
css describes how HTML elements are to be displayed on screen , paper or in other media
HTML - what to display
CSS  - How to Display 
==========================================
css syntax:

selector {
    propertyName : value;
}

p{
    color:red;
}
==========================================
How to add CSS
External CSS |  Internal CSS  |  Inline CSS 

1.add external css file
 create a file style.css
and in html file link that css file
<link rel="stylesheet" href="./style.css" />
we can add and link any number of external files , last file gets more priority

2.Internal CSS 
 inside head tag write the style tag
  <style>
      p {
        color: blue;
      }
    </style>

3.Inline CSS 
  <p style="color: green; font-size: 12px">Paragraph 3</p>
==========================================
CSS Selectors:
 we have 3 main Selectors
 1.element selector
    p{
      color:red;
    }

 2.id selector

    <p id="p3">paragraph</p>
    #p3 {
    color: yellowgreen;
    }
    only one id per element

 3.class selector
    <p class="colo">paragraph</p>
    .colo {
      color: blue;
    }
    we can have any number of classes in a element

<p class="colo underline" id="p1">Paragraph</p>

order:
    id > class > element
==========================================
Comments in CSS:
/*  comment here  */

==========================================
Colors:
in css colors can be specified using
Predefined color names
RGB
RGBA
HEX
HSL
HSLA

modern browsers support 140 named colors
we can see colors from https://htmlcolorcodes.com/color-names/

RGB:
red,green,blue
color value between 0 and 255
black - rgb(0,0,0)
white - rgb(255,255,255)
red - rgb(255,0,0)
blue - rgb(0,0,255)
green - rgb(0,255,0)

RGBA
red,green,blue,alpha
aplha parameter is a number between 0.0(fully transparent) and 1.0 (not transparent at all)
rgba(255,99,71,0.5)

HEX:
#rrggbb
hexadecimal values between 00 and ff(same as decimal 0-255)
red : #ff0000
black : #000000
white : #ffffff

HSL
hue,saturation , lightness
hue is degree on color wheel from 0 to 360 . 0 is red ,120 is green , 240 is blue
saturation is a percentage value ,0% means a shade of grey and 100% is full color
lightness is also percentage , 0% is black , 50% is neither light or dark , 100% is white
RED: hsl(0,100%,50%)

HSLA:
hue,saturation , lightness , alpha
alpha parameter is a number between 0.0(fully transparent) and 1.0 (not transparent at all)
hsla(0,100%,50%,0.5)
==========================================
Backgrounds:

Which ever element has a height and width we can change its background

    #bg {
        background-color: blue;
       }

background image:
    #bg {
        background-image: url('./image.png');
        /* this will repeat image multiple times to fit the element width and height */
      }

           #bg {
        background-image: url('./image.png');
        /* this will repeat image multiple times to fit the element width and height */
        background-repeat: no-repeat;
        /* to not repeat image use no-repeat */
      }
        #bg {
        background-image: url('./image.png');
        /* this will repeat image multiple times to fit the element width and height */
        background-repeat: repeat-x;
        /* to not repeat image on x-axis only */
      }
      similarly to repeat on y-axis , use background-repeat: repeat-y;
      default is repeat , which repeats image on both x,y axis
            #bg {
        background-image: url('./image.png');
        /* this will repeat image multiple times to fit the element width and height */
        background-repeat: no-repeat;
        /* to not repeat image  */
        background-position: right top;
        /* this displays image on top right corner, we can provide different values like center center | right center |... */
      }

       #bg {
        background-image: url('./image.png');
        /* this will repeat image multiple times to fit the element width and height */
        background-repeat: no-repeat;
        /* to not repeat image  */
        background-position: right top;
        /* this displays image on top right corner, we can provide different values like center center | right center |... */
        background-size: 100% 100%;
        /* fills the image size to full length and width of container */

        background-attachment: fixed;
        /* this makes image fixed , means only content will move but not image */
      }

           #bg {
        background-size: 100% 100%;
        /* background image will  */
        background-size: cover;
        /* this will cover entire container width and height , but this will cut the backgroundimage better use for patterns */

        background-size: contain;
        /* container and image ratio must be same when using contain */
      }

      shortcut background
      #bg {
        background: #fff url('./image.png') no-repeat fixed 5% 10%;
      }

multiple Backgrounds

  #bg {
        background-color: yellow;
        background-image: url('./image.png');
        background-repeat: no-repeat;
        background-size: cover;
      }

     #bg {
        background-color: yellow;
        background-image: url('./image.png'), url('./image.png');
        background-repeat: no-repeat;
        background-position: left top, right bottom;
      }

==========================================
Borders:
  #border {
        border-style: solid;
        border-style: dotted;
        border-style: dashed;

        border-style: double;
        /* creates a frame */
        border-style: groove;
        border-style: ridge;
        border-style: inset;
        border-style: outset;
        /* default is none */
        border-style: none;
        /* we must define border color , border width */

        /* top right bottom left - clockwise */
        border-style: solid dashed none dotted;

        /* 1st-top,bottom  2nd - left,right */
        border-style: solid dotted;

        border-width: 5px;
        border-width: 5px 10px;
        border-width: 2px 4px 6px 8px;

        border-color: red;
        /* 1st- top  , 2nd-left,right , 3rd-bottom */
        border-color: red green blue;

        border: 5px solid green;

        border-top-style: solid;
        border-top-width: 10px;
        border-top-color: red;

        /* to curve border */
        border-radius: 10px;

        /* to make circle */
        border-radius: 50%;

        border-radius: 10px 20px;
      }

==========================================
CSS Height and width:

      #div1 {
        background-color: blueviolet;
        height: 500;
        /* 70% of width means , it will occupy 70% of its parent element width */
        width: 70%;
        /* this will restrict width to 500px */
        max-width: 500px;
        /* restricts max height */
        max-height: 300px;
        min-width: 300px;
        min-height: 300px;
      }

=============================================
CSS Padding:
gap between border and content
      #div1 {
        border: 1px solid red;
        padding: 50px;
        padding-top: 50px;
        padding-bottom: 20px;
        padding-right: 80px;
        padding-left: 20%;
      }

=======================================
CSS Margins:
space between elements

      #div1 {
        margin-top: 50px;
        margin-bottom: 20px;
        margin-left: 60px;
        margin-right: 10%;

        margin: 25px;

        /* to  make horizontal center */
        margin: 20px auto;

        /* margin collapse */
        /* means whichever is highest margin it will be applied , but not the combined sum of margin */
      }

==========================================
Box Model:

margin
  border  
      padding
------------  content--------

When you set the width and height properties of an element with CSS , you just
set the width and height of content area .to calculate the full size of an element
you must also add padding , borders and margins  
Total element width = width + left padding + right padding + left border + right border + left margin + right margin
Total element height = height + top padding + bottom padding + top border + bottom border + top margin + bottom margin
==========================================
CSS Text:
      #text {
        /* to change text color */
        color: blue;

        /* to align text */
        /* by default is left , we can align it right , center */
        text-align: center;

        /* like newspaper , content will be spread all the width and height */
        text-align: justify;
        /* change direction */
        direction: rtl;

        /* decorate text */
        /* by default text decoration is null */
        text-decoration: underline;
        /* we can use overline , underline , line-through */

        /* text transform */
        text-transform: uppercase;
        /* lowercase , Capitalize */

        line-height: 1.4;
        letter-spacing: 2px;
        word-spacing: 3px;

        /* if we want the behavior of pre tag thru css use below */
        white-space: pre;
        white-space: nowrap;

        /* if we have a word that is too long and going out of the container body , use word-wrap:break-word */
        word-wrap: break-word;

        /* text shadow */
        font-size: 70px;
        /* horizontal | move up down , if given negative moves up | blur | color */
        text-shadow: 5px 10px 5px red;

        /* to change writing to vertical */
        writing-mode: vertical-lr;
        /* vertical-rl */
      }
      /* if we have an image and we want to place it in between text content and style it then use below */
      img {
        border: 1px solid red;
        /* vertical align : top|middle */
        vertical-align: middle;
      }
==========================================
CSS Links:
must follow LVHA order while styling link
      a {
        text-decoration: none;
      }
      a:link {
        color: yellowgreen;
      }
      a:visited {
        color: black;
      }
      a:hover {
        color: orange;
      }
      a:active {
        color: red;
      }

==========================================
Fonts:
   p {
        font-size: 30px;
        font-weight: bold;
        font-weight: 300;
        font-style: italic;
        font-variant: small-caps;
        
      }

goto google fonts

include the required font link in the html - head tag
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100;400&display=swap" rel="stylesheet">

Then in css use that
font-family: 'Roboto', sans-serif;


or we can download a font and use it as below by css
@font-face{
    font-family:abc;
    src:url('fonts/Aclonica.ttf');
}
use as below
h1{
  font-family:abc;
}

shorthand:
font: italic small-caps bold 20px sans-serif;

==========================================
CSS Units:
We use length in width , height , margin ,padding , font-size

There are two types of units in css
a.Absolute
b.Relative

Absolute                Relative
Cm                      Em , Rem , Vh ,Vw , %
Mm ,Inch ,px,pt,pc


absolute units in css
cm , mm , in , px(1inch=96px) , pt(1inch=72pt) ,pc (1pc=12pt)

relative units
em - em is relative to size of its direct parent
if parent has 10 px and we assign 2em - then it will become 20px

rem - rem is relative to root (html tag) size

vh - 1% of view port height
vw - 1% of viewport width 

% - relative to parent
==========================================
      /* a {
        text-decoration: none;
      }
      a:link {
        color: yellowgreen;
      }
      a:visited {
        color: black;
      }
      a:hover {
        color: orange;
      }
      a:active {
        color: red;
      }
      p {
        font-size: 30px;
        font-weight: bold;
        font-weight: 300;
        font-style: italic;
        font-variant: small-caps;
      } */

      #parent {
        border: 1px solid red;
        /* width: 100mm; */
        /* width: 5in; */
        /* width: 500px;
        width: 500pt; */
        /* width: 500pc; */

        /* width: 800px; */
        /* based on viewport height and width */
        /* height: 50vh;
        width: 50vw; */

        font-size: 30px;
      }
      #child {
        border: 1px solid blue;
        /* 50% of parent div - 400px */
        /* width: 50%; */
        /* 2*parentFontSize = 2*30 =60px */
        font-size: 2em;
      }

      html {
        font-size: 10px;
      }
      #child {
        /* 2*htmlFontSize = 2*10=20px */
        font-size: 2rem;
      }

      #child {
        /* if u want to change font based on width of screen then use vw , if based on height use  vh */
        font-size: 4vw;
      }

==========================================
CSS Cursor:
      #cur {
        border: 10px solid red;

        /* default */
        cursor: auto;
        /*  display cursor as  arrow on 4 sides of + */
        cursor: all-scroll;

        /* display + */
        cursor: cell;
        /* display cursor as  <-||->*/
        cursor: col-resize;
        /* crosshair , + symbol */
        cursor: crosshair;
        /* <-> */
        cursor: e-resize;
        /* hand */
        cursor: grab;
        /* pointer with question mark */
        cursor: help;
        /* not allowed symbol */
        cursor: not-allowed;
        /* hand same as on link */
        cursor: pointer;
        /* progress */
        cursor: progress;
        /* wait  */
        cursor: wait;
        cursor: zoom-in;
      }
==========================================
important
 border: 10px solid red !important;
==========================================
CSS Box shadow:
      div {
        border: 1px solid green;
        width: 500px;
        background-color: yellowgreen;
        margin: 100px;
        padding: 20px;

        /* box-shadow :  x y blur spread color */
        box-shadow: 10px 10px 5px 3px grey;
        /* to get shadow inside  */
        /* box-shadow :  x y blur spread color inset*/
        box-shadow: 10px 10px 5px 3px grey inset;

        /* multiple shadow*/
        /* negative x , y values will behave in opposite shadow */
        box-shadow: 10px 10px 5px 3px grey, -10px -10px 5px 3px pink;
      }

==========================================
CSS Opacity:
      #color-box {
        background-color: green;
        height: 200px;
        width: 500px;
        margin-bottom: 20px;
        /* opacity 0 - will become invisible , we can give any value between 0 to 1 */
        opacity: 0.5;
      }
      img:hover {
        opacity: 0.7;
      }
      #red-box {
        height: 300px;
        width: 200px;
        background-color: red;
        margin-top: -100;
        /* to make transparent we can use opacity */
        opacity: 0.5;
      }

==========================================
CSS Filter:
filter will be applied to image

     img {
        filter: blur(10px);
        filter: brightness(50%);
        filter: contrast(70%);
        /* we can apply shadow thru box-shadow */
        filter: drop-shadow(8px 8px 5px red);

        /* make blackNwhite */
        filter: grayscale(50%);

        filter: hue-rotate(90deg);

        filter: invert(100%);

        filter: opacity(30%);
        filter: saturate(30%);
        filter: sepia(30%);

        /* we can apply multiple properties by comma seperated */
        filter: brightness(80%), contrast(100%);
      }

==========================================
Image sprites:
suppose we have 3 flag images in single image , but we can use 3 flags seperately
can be used as background images only
when we have small images in our website , we can combine them and use it as background images

   #sprite {
        height: 64px;
        background-image: url('./image.png');
        background-repeat: no-repeat;
        background-position: 0px -143px;
      }

      by changing background-position we can change the image to get displayed
==========================================
CSS Gradients:
mixing 2 colors smoothly
we have 2 types
linear , radial gradients

      #gradient {
        height: 500px;
        border: 1px solid grey;
        /* background-image: linear-gradient(green, blue); */
        /* default direction is top to bottom */
        background-image: linear-gradient(green, red, blue);
        /* to change direction */
        background-image: linear-gradient(to right, green, red, blue);
        background-image: linear-gradient(to bottom right, green, red, blue);
        background-image: linear-gradient(160deg, green, red, blue);

        /* by default shape is eclipse */
        background-image: radial-gradient(blue, red);
        background-image: radial-gradient(green, blue, red);
        /* we can specify shape */
        background-image: radial-gradient(circle, blue, red);
        /* we can specify the color with its respective percentage of occupied area */
        background-image: radial-gradient(circle, green 20%, blue 30%, red 50%);
      }

==========================================
CSS Overflow:

content is beyond the container , we can control that using overflow 
when we dont want to change container height , but want to display its content beyond container height

      #overflow {
        background-color: whitesmoke;
        border: 1px solid red;
        width: 500px;
        height: 300px;
        /* default */
        overflow: visible;
        /* we can hide overflow content */
        overflow: hidden;
        /*we can create a scroll within container  */
        overflow: scroll;
        /* we have overflow-x and overflow-y specific to direction */
        overflow-x: hidden;
        overflow-y: scroll;

        /* we have overflow auto , so that scroll bar comes based on content */
        overflow: auto;
      }

==========================================
CSS Resizable:

      textarea {
        /* textarea by default is resizable , we can set it to none */
        resize: none;
      }
      #overflow {
        resize: both;
        resize: horizontal;
        resize: vertical;
      }

==========================================
CSS Lists:
      ul {
        list-style-type: none;
        list-style-type: circle;
        list-style-type: disc;
        list-style-type: square;

        list-style-image: url('./image.png');

        /* default is outside */
        list-style-position: outside;
        list-style-position: inside;
      }
      ol {
        list-style-type: lower-alpha;
        list-style-type: upper-alpha;
        list-style-type: lower-roman;
        list-style-type: upper-roman;
        list-style-type: decimal;
        list-style-type: decimal-leading-zero;
      }
      li {
        border: 1px solid black;
      }

==========================================
CSS Tables:
  <style>
      table {
        border: 1px solid red;
        border-collapse: collapse;
        /* to set border-spacing border-collapse should be default */
        /*
        border-collapse: separate;
        border-spacing: 15px;
*/
        /* to hide empty cells */
        empty-cells: hide;
        /* table-layout : we have fixed , auto */
        table-layout: auto;
        width: 300px;
      }
      caption {
        border: 1px solid red;
      }
      /* border will not be applied to rows */
      /* tr {
        border: 1px solid red;
      } */
      th {
        border: 1px solid red;
        height: 30px;
        padding: 15px;
        text-align: right;
      }
      td {
        border: 1px solid red;
        height: 25px;
        padding: 5px;
        text-align: center;
        vertical-align: bottom;
        vertical-align: top;
        vertical-align: middle;
      }
    </style>

     <table>
      <caption>
        Table CSS
      </caption>
      <tr>
        <th>Heading - 1</th>
        <th>Heading - 2</th>
        <th>Heading - 3</th>
      </tr>
      <tr>
        <td>COntent - 1</td>
        <td>COntent - 2</td>
        <td>COntent - 3</td>
      </tr>
      <tr>
        <td>demo - 1</td>
        <td>demo - 2</td>
        <td>demo - 3</td>
      </tr>
    </table>
==========================================
CSS Functions:

rgb()
rgba()
url()
radial-gradient()
linear-gradient()
we have seen these above

      :root {
        --primary-color: teal;
        --btn-color: blueviolet;
        --text-color: white;
      }
      #fun {
        background-color: var(--primary-color);
        height: 200px;
        width: calc(100% - 100px);
      }
      a {
        padding: 10px 30px;
        margin: 20px;
        background-color: var(--btn-color);
        color: var(--text-color);
        text-decoration: none;
      }

==========================================
Box Sizing:
      #div1 {
        background-color: aqua;
        width: 600px;
        height: 200px;
      }
      #div2 {
        background-color: magenta;
        width: 600px;
        height: 200px;
        padding: 50px;
        border: 10px solid black;

        /* box-sizing: content-box; - is default  */
        /* border-box , container size will get fixed once height , width is defined */
        box-sizing: border-box;
      }
==========================================
CSS Initial vs Inherit
    <style>
      #green {
        color: green;
      }
      #blue {
        color: red;
      }
      #initial {
        /* initial means whatever default css value is assigned will be taken , like link default color is blue */
        color: initial;
      }
      #inherit {
        /* inherit means it will take parent css value */
        color: inherit;
      }
    </style>
  </head>
  <body>
    <div id="green">
      Green Text <br />
      <a href="" id="blue">Link 1</a><br />
      <a href="" id="initial">Link 2</a><br />
      <a href="" id="inherit">Link 3</a><br />
    </div>
  </body>

==========================================
Object fit:
can be applied on image , video

      img {
        border: 1px solid red;
        width: 500px;
        height: 400px;
        object-fit: contain;
        object-fit: fill;
        object-fit: cover;

        /* object-position : top center , left center */
        object-position: top center;
      }
==========================================
CSS Psuedo classes 

selector:pseudo-class{

}
a:link{

}
a:hover{

}
a:visited{

}
a:active{
  
}

 <style>
      #green {
        color: green;
      }
      #blue {
        color: red;
      }
      #initial {
        /* initial means whatever default css value is assigned will be taken , like link default color is blue */
        color: initial;
      }
      #inherit {
        /* inherit means it will take parent css value */
        color: inherit;
      }

      img {
        border: 1px solid red;
        width: 500px;
        height: 400px;
        object-fit: contain;
        object-fit: fill;
        object-fit: cover;

        /* object-position : top center , left center */
        object-position: top center;
      }
      li:first-child {
        color: red;
      }
      li:last-child {
        color: blue;
      }
      li:nth-child(2) {
        color: pink;
      }
      li:nth-child(even) {
        color: aqua;
      }
      li:nth-child(odd) {
        color: blueviolet;
      }
      li:nth-child(3n + 0) {
        color: red;
      }
      li:nth-child(3n + 1) {
        color: navy;
      }
      li:nth-last-child(2) {
        color: khaki;
      }
      input:focus {
        border: 3px solid red;
      }
    </style>
==========================================
Psuedo elements
it has 2 colons

selector::pseudo-element{

}

      p::first-letter {
        font-size: 35px;
        color: red;
      }
      p::first-line {
        font-size: 35px;
        color: red;
      }
      /* to add a image[content] before heading  */
      h1::before {
        content: url(./image.png);
      }
      h1::after {
        content: ' added after';
      }
      /* to change color when we select text on webpage */
      ::selection {
        color: red;
        background: yellow;
      }

==========================================
Display:

in html every element will be a box , each element has a display property

display we have 4 main values : block , inline , inline-block , none 
default we have either block or inline

block - whole line
inline - upto content 

block - div , p , h1 , form 
inline - a , img , span 

we can change display property of the element , block to inline and viceversa

block - starts in new line , takes full width , we can give height and width
inline - not in new line , no full width , cant apply height and width 
inline-block - not in new line , no full width , but can take height and width 

block :

     .display {
        border: 1px solid red;
        width: 50%;
        height: 100px;
      }
         <div class="display">This is a div 1</div>
    <div class="display">This is a div 2</div>

inline:

   .display {
        border: 1px solid red;
        width: 50%;
        height: 100px;
        display: inline;
      }

inline-block
      .display {
        border: 1px solid red;
        width: 50%;
        height: 100px;
        display: inline-block;
      }

display:none ;
this will hide the element completely , as if the element doesnot exist in html
  #div1 {
        display: none;
      }

visibility:hidden;
element is just hidden , but not removed from html
      #div1 {
        
        visibility: hidden;
      }
==========================================
position:

we have
      static 
      relative
      fixed
      absolute

top , bottom  , left , right

static is the default property of all html elements - normal flow

relative , fixed , absolute - on these 3 we can apply top , left , bottom , absolute 

when we apply position:relative , when we specify top,left , bottom,right - then it will change its position
based on its current position

say we have given position relative , bottom 50px then it will move 50px bottom with respect to its default[static] position 

     #two {
        width: 100px;
        height: 100px;
        background-color: blue;
        display: inline-block;
        position: relative;
        bottom: 50px;
        left: 30px;
      }

bottom 50px means it will move , 50px up from its current position


absolute: when we apply position absolute , then it will change its position based on its positioned parent
it will calculate its position based on the positioned parent 

if there is no positioned parent , then it will calculate based on the body tag 

   #two {
        width: 100px;
        height: 100px;
        background-color: blue;
        display: inline-block;
        position: absolute;
        left: 30px;
        top: 30px;
      }

fixed: though we scroll , the content will be fixed on the webpage 

 #two {
        width: 100px;
        height: 100px;
        background-color: blue;
        display: inline-block;
        position: fixed;
        right: 0px;
        bottom: 0px;
      }
we must specify top/bottom / left/right - if we r specifying position absolute or fixed and if we r not specifying top/bottom / left/right
 it will leave its position , some other element after it will come in its place , below it 
==========================================
Layers and Z-index:

layers
#parent {
        border: 1px solid red;
        padding: 20px;
        width: 50%;
        position: relative;
      }
      #one {
        width: 100px;
        height: 100px;
        background-color: green;
        display: inline-block;
        position: relative;
      }
      #two {
        width: 100px;
        height: 100px;
        background-color: blue;
        display: inline-block;
        position: relative;
        top: 50px;
        left: -50px;
      }
      #three {
        width: 100px;
        height: 100px;
        background-color: black;
        display: inline-block;
        position: relative;
        top: 100px;
        left: -100px;
      }

z-index will work only if it has position : relative/absolute/fixed

the higher z-index , it will appear on the top

  #parent {
        border: 1px solid red;
        padding: 20px;
        width: 50%;
        position: relative;
      }
      #one {
        width: 100px;
        height: 100px;
        background-color: green;
        display: inline-block;
        position: relative;
        z-index: 3;
      }
      #two {
        width: 100px;
        height: 100px;
        background-color: blue;
        display: inline-block;
        position: relative;
        top: 50px;
        left: -50px;
        z-index: 2;
      }
      #three {
        width: 100px;
        height: 100px;
        background-color: black;
        display: inline-block;
        position: relative;
        top: 100px;
        left: -100px;
        z-index: 1;
      }
==========================================
CSS Float and clear:
when we apply float on any element then we can move that element left , right 

      img {
        height: 200px;
        width: 200px;
        padding: 10px;
      }
      #img1 {
        float: right;
      }
      #img2 {
        float: left;
      }

when we apply float on the li elements which are inside ul element , all li will come outside of the container
so must apply overflow:auto  on the container element , so that containing elements are within it
navigation bar
  ul {
        background-color: green;
        list-style-type: none;
        /* border: 1px solid red; */
        overflow: auto;
      }
      li {
        color: white;
        padding: 10px 10px;
        float: left;
      }

we will tell whether a element can be on side of other floated element or not & also non floated element , we tell it thru clear
clear can be applied on floated and non floated element

when we apply clear on element , it will come in next line 

when we want images to display one below other , when applied float , we can apply clear so that they appear one after other instead of side by side
  p {
        border: 1px solid red;
        overflow: auto;
      }
      img {
        width: 100px;
        height: auto;
      }

      #img1 {
        float: right;
      }
      #img2 {
        float: right;
        clear: right;
      }


clear can be applied on non floated element , 

      #content {
        width: 70%;
        background-color: green;
        height: 200px;
        float: left;
      }
      #sidebar {
        width: 30%;
        background-color: indianred;
        height: 150px;
        float: left;
      }

      #footer {
        width: 100%;
        background-color: pink;
        clear: both;
      }

          <div id="content">Content</div>
    <div id="sidebar">Sidebar</div>
    <div id="footer">Footer</div>
==========================================
2d-transforms
transform - will not work with inline , we can change it to block /inline-block

  translate

     #wrapper {
        padding: 20px;
        margin: 20px;
      }
      a {
        text-decoration: none;
        background-color: lightcoral;
        padding: 10px 20px;
        color: white;
      }
      a:hover {
        /* move the element 50px in x axis and 50px in y axis */
        display: inline-block;
        transform: translate(50px, 50px);
        /* we can give negative x and y values also */
        /* transform: translate(-50px, -50px); */
      }

  rotate
       #wrapper {
        padding: 20px;
        margin: 20px;
      }
      a {
        text-decoration: none;
        background-color: lightcoral;
        padding: 10px 20px;
        color: white;
      }
      a:hover {
        display: inline-block;
        /*rotate in clockwise 20deg*/
        transform: rotate(20deg);

        /*rotate in anti-clockwise 20deg*/
        transform: rotate(-20deg);
      }
  scale

            a:hover {
        display: inline-block;
        /* multiples 2*width , 3*height */
        transform: scale(2, 3);
        /* if only width to be scaled */
        /* transform: scaleX(0.8);
        transform: scaleY(0.5); */
      }

  skew
            a {
        text-decoration: none;
        background-color: lightcoral;
        padding: 10px 20px;
        color: white;

        display: inline-block;
        transform: skew(20deg, 10deg);
        transform: skewX(20deg);
        transform: skewY(10deg);
      }

  transform-origin :
  to change origin of rotation , transform is considering
            a {
        text-decoration: none;
        background-color: lightcoral;
        padding: 10px 20px;
        color: white;

        display: inline-block;
        transform: rotate(20deg);
        transform-origin: 0% 100%;
      }

  matrix:
        #wrapper {
        padding: 20px;
        margin: 20px;
        background-color: yellow;
        /* transform: matrix(
          scaleX(),
          skewY(),
          skewX(),
          scaleY(),
          translateX(),
          translateY()
        ); */

        transform: matrix(1, -0.5, 0, 1, 0, 0);
      }
==========================================
CSS 3D transforms:
perspective : from how much distance we are observing an object 
perspective-originx - along x axis
perspective-origin y - along y axis 

  transform:perspective(300px) rotate3d();
  perspective-origin: 50% 50%;


      <style>
      #cover {
        border: 2px solid red;
        height: 200px;
        width: 200px;
        margin: 150px;
      }
      #content {
        height: 200px;
        width: 200px;
        background-color: yellowgreen;
        /* rotate along x axis */
        transform: perspective(300px) rotate3d(50, 0, 0, 20deg);
        /* rotate along y axis */
        transform: perspective(300px) rotate3d(0, 50, 0, 20deg);
        /* rotate along z axis */
        transform: perspective(300px) rotate3d(0, 0, 50, 20deg);
      }
    </style>
  </head>
  <body>
    <div id="cover">
      <div id="content"></div>
    </div>
  </body>

   #content {
        height: 200px;
        width: 200px;
        background-color: yellowgreen;
        transform: perspective(300px) translate3d(50px,0px,0px);
        transform: perspective(300px) translate3d(0px,50px,0px);
        transform: perspective(300px) translate3d(0px,0px,50px);
        transform: perspective(300px) translate3d(50px,50px,50px);
    }    
==========================================
CSS - transitions
changing state , like on hover changing an elements size

   <style>
      #div1 {
        height: 100px;
        width: 100px;
        background-color: red;
        margin: 100px;
        transition-property: width;
        transition-duration: 1s;
      }
      #div1:hover {
        /* to make smooth transition */
        width: 200px;
        /* we must specify , which property we want transition and in how much time transition should take */
      }
    </style>
  </head>
  <body>
    <div id="div1"></div>
  </body>

  transition-property on more than one property 
   <style>
      #div1 {
        height: 100px;
        width: 100px;
        background-color: red;
        margin: 100px;
        transition-property: width, background-color;
        transition-duration: 1s;
      }
      #div1:hover {
        /* to make smooth transition */
        width: 200px;
        background-color: pink;
        /* we must specify , which property we want transition and in how much time transition should take */
      }
    </style>

     transition-duration: 50ms; - can be in seconds and milliseconds

      transition-delay: 500ms;

        #div1 {
        height: 100px;
        width: 100px;
        background-color: red;
        margin: 100px;
        transition-property: width, background-color;
        transition-duration: 50ms;
        /* transition-delay: 500ms; */
        /* to make transition fast at start , same pace , fast at end ,... we use timing function*/
        /* transition-timing-function: linear; - default */
        transition-timing-function: ease-in-out;
      }

      shortcut
      #div1 {
        height: 100px;
        width: 100px;
        background-color: red;
        margin: 100px;
        transition: width 2s, height 3s;

        /* shortcut */
        /* transition: property , duration , timing-function , delay; */
      }
      #div1:hover {
        width: 200px;
        height: 300px;
       
      }
==========================================
CSS Animations:

    <style>
      /* what will happen and when it will happen defined in keyframe [about animation] */
      @keyframes changecolor {
        from {
          background-color: red;
        }
        to {
          background-color: yellow;
        }
      }
      #animate {
        background-color: red;
        width: 200px;
        height: 200px;
        animation-name: changecolor;
        animation-duration: 2s;
      }
    </style>
  </head>
  <body>
    <div id="animate"></div>
  </body>

     @keyframes changecolor {
        0% {
          background-color: red;
        }
        100% {
          background-color: yellow;
        }
      }

          <style>
      /* what will happen and when it will happen defined in keyframe [about animation] */
      @keyframes changecolor {
        /* these 0,25,50,75,100 % represent will divide animation-duration and apply according to their time */
        0% {
          background-color: red;
        }
        25% {
          background-color: green;
        }
        50% {
          background-color: orange;
        }
        75% {
          background-color: pink;
        }
        100% {
          background-color: yellow;
        }
      }
      #animate {
        background-color: red;
        width: 200px;
        height: 200px;
        animation-name: changecolor;
        animation-duration: 2s;
      }
    </style>
  </head>
  <body>
    <div id="animate"></div>
  </body>

     #animate {
        background-color: red;
        width: 200px;
        height: 200px;
        animation-name: changecolor;
        animation-duration: 2s;
        animation-delay: 4s;
        /* to repeat animation continuosly */
        animation-iteration-count: 3;
        animation-iteration-count: infinite;
      }

    <style>
      /* what will happen and when it will happen defined in keyframe [about animation] */
      @keyframes changecolor {
        /* these 0,25,50,75,100 % represent will divide animation-duration and apply according to their time */
        0% {
          background-color: red;
        }
        25% {
          background-color: green;
        }
        50% {
          background-color: orange;
        }
        75% {
          background-color: pink;
        }
        100% {
          background-color: yellow;
        }
      }
      #animate {
        background-color: red;
        width: 200px;
        height: 200px;
        animation-name: changecolor;
        animation-duration: 2s;
        animation-delay: 4s;
        /* to repeat animation continuosly */
        /* animation-iteration-count: 3; */
        animation-iteration-count: infinite;
      }
      #animate2 {
        background-color: red;
        width: 200px;
        height: 200px;
        animation-name: changecolor;
        animation-duration: 2s;
        animation-delay: 4s;
        /* to repeat animation continuosly */
        /* animation-iteration-count: 3; */
        animation-iteration-count: infinite;
        /* animation-direction: reverse; */
        animation-direction: alternate;
        animation-direction: alternate-reverse;
        /* timing function */
        animation-timing-function: ease;
        /* ease, ease-in , ease-out , ease-in-out,linear */
      }
    </style>
  </head>
  <body>
    <div id="animate"></div>
    <hr />
    <div id="animate2"></div>
  </body>

       /* what will happen and when it will happen defined in keyframe [about animation] */
      @keyframes changecolor {
        /* these 0,25,50,75,100 % represent will divide animation-duration and apply according to their time */
        0% {
          background-color: red;
          border-radius: 0%;
        }
        10% {
          background-color: green;
          border-radius: 10%;
        }
        20% {
          background-color: blue;
          border-radius: 20%;
        }
        30% {
          background-color: orange;
          border-radius: 30%;
        }
        40% {
          background-color: pink;
          border-radius: 40%;
        }
        50% {
          background-color: olive;
          border-radius: 50%;
        }
        60% {
          background-color: red;
          border-radius: 40%;
        }
        70% {
          background-color: magenta;
          border-radius: 30%;
        }
        80% {
          background-color: red;
          border-radius: 20%;
        }
        90% {
          background-color: khaki;
          border-radius: 10%;
        }
        100% {
          background-color: red;
          border-radius: 0%;
        }
      }
      #animate {
        background-color: red;
        width: 200px;
        height: 200px;
        animation-name: changecolor;
        animation-duration: 2s;
        /* animation-delay: 4s; */
        /* to repeat animation continuosly */
        /* animation-iteration-count: 3; */
        animation-iteration-count: infinite;
        animation-timing-function: linear;
      }
==========================================
Print style in CSS:
    <style>
      /* this will be for the visible screen on webpage */
      @media screen {
        p {
          font-size: 20px;
        }
      }
      /* this will be applied when we try to print */
      @media print {
        p {
          font-size: 40px;
        }
        img {
          display: none;
        }
        div {
          width: 50%;
        }
      }
    </style>
==========================================
Responsive Web Design:

To make website responsive we must specify 
meta tag
media queries
make images and videos responsive

we must specify the 
 <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 meta tag to make page responsive


 media queries:
 we have online websites which shows the browser screensize ,thus we can know at which browser size website is breaking the style
 then we can apply media queries

     <style>
      #div1 {
        width: 70%;
        float: left;
        background-color: lawngreen;
      }
      #div2 {
        width: 30%;
        float: left;
        background-color: rosybrown;
      }
      h1 {
        font-size: 80px;
      }
      /* max-width :768 means , the screen size below 768px will have the styles applied inside this media query */
      @media screen and (max-width: 768px) {
        #div1 {
          width: 50%;
        }
        #div2 {
          width: 50%;
        }
      }

      @media screen and (max-width: 400px) {
        #div1 {
          width: 100%;
        }
        #div2 {
          width: 100%;
          color: white;
          background: black;
        }
      }
      /* screen size above 400px , will get the styles applied when we specify min-width */
      @media screen and (min-width: 400px) {
        #div1 {
          width: 100%;
        }
        #div2 {
          width: 100%;
          color: white;
          background: black;
        }
      }

      @media screen and (min-width: 400px) and (max-width: 768px) {
        #div1 {
          width: 100%;
        }
        #div2 {
          width: 100%;
          color: white;
          background: black;
        }
      }
    </style>
  </head>
  <body>
    <div id="div1">
      <h1>Div1</h1>
    </div>
    <div id="div2">
      <h1>Div2</h1>
    </div>
  </body>


  To make images , videos responsive: 
         img {
        width: 100%;
        height: auto;
      }
      video {
        width: 100%;
        height: auto;
      }

==========================================
Advanced selectors:

1.type selector
  h1{
    color:red;
  }
2.id selector - must be unique
  #idName{
    color:red;
  }
3.class selector - can have same class on multiple elements
  .className{
    color:red;
  }
4.pseudo class and psuedo element 
  a:hover{
    color:red;
  }
  p::first-line{
    color:red;
  }
5.attribute selector - mostly used in form 
  a[href="https://example.com"]{
    color:red;
  }
6.universal selector 
  *{
    color:red;
  }
7.combinator selector 
  descendant selector (child at any stage)
  any span , inside .red-p class , no need of being direct child
  .red-p span{
    color:green;
  }

  child combinatory(direct child)
  .red-p>span{
    color:red;
  }

  adjacent combinatory(right after sibling)
  .red-p+h1{
    color:green;
  }

  general sibling combinatory(all sibling)
  .red-p~h1{
    color:green;
  }

  general sibling combinatory(right after sibling)
  .red-p,h1{
    color:green;
  }

  refer index20.html file 
==========================================
Specificity:
It is which css property will get applied  
more specific rule will get more value 

!important will override everything
inline can override everything except !important
external will work according to Specificity

Specificity
# - id selector has highest value
* - has lowest value

Specificity rule trick 
10000 points to !important
1000 to inline
100 to id
10 to class , attribute , pseudo-class
1 for element selector and pseudo-elements
0 to universal selector

if same rule written two or more times in external sheet then last rule will be applicable 


==========================================
Multiple columns:

      div {
        column-count: 3;
        column-gap: 50px;
        column-rule-style: solid;
        column-rule-width: 1px;
        column-rule-color: red;

        /* shortcut */
        column-rule: 1px soild red;
        column-width: 300px;
      }
      h1 {
        column-span: all;
      }
  
index21.html file  

==========================================
CSS Flexbox:

    <div class="flex-container">
      <div class="flex-child">div-1</div>
      <div class="flex-child">div-2</div>
      <div class="flex-child">div-3</div>
      <div class="flex-child">div-4</div>
    </div>

display:flex
    when we apply display:flex on parent container , then all the child elements inside it will behave as inline-block and 
    display side by side 
To change the direction of the flex elements
    flex-direction: row [is default]
    flex-direction: row-reverse
    flex-direction: column
    flex-direction: cloumn-reverse

to move elements to next row we use flex-wrap , to control whether to go to next row or not 
    flex-wrap:nowrap; //this will adjust its size instead of going to new line 
    flex-wrap:wrap; //goes to new line when the size of elements is bigger than the current line size 
    flex-wrap: wrap-reverse; // this will move in reverse direction 

combination of direction and wrap - flex-flow
    flex-flow: row wrap;

to make flex elements center horizontally 
    justify-content: center;
also we can move elements to start and end
        justify-content: flex-start;
        justify-content: flex-end;

        /* same space on both sides of elements */
        justify-content: space-around;

        /* space will be adjusted in between elements */
        justify-content: space-between;
        /* space will be distributed evenly between elements and webpage margin */
        justify-content: space-evenly;


if we give height to container , flex items will become equal to that height

to make flex elements vertically center 
      align-items: center;

        /* by default align-items: stretch , strecthes upto container height */
        align-items: stretch;

        /* to make vertically center */
        align-items: center;

        /* to be at top */
        align-items: flex-start;
        /* to be at bottom */
        align-items: flex-end;


align-content
        /* align-content is opposite to justify-content , behaves opposite i.e vertically */
        /* default is stretch */
        align-content: stretch;
        align-content: space-between;
        align-content: flex-start;
        align-content: flex-end;


to make element center horizontally and vertically
    display: flex;
    justify-content: center;
    align-items: center;


properties on flex elements

order
      #one {
        order: 2;
      }
      #two {
        order: -1;
      }
      #three {
        order: -10;
      }

flex-grow:
      when we specify flex-grow as 1 , if there is any empty space in row flex elements will occupy the space eqaully
      #one {
        flex-grow: 1;
      }
      #two {
        flex-grow: 1;
      }
      #three {
        flex-grow: 1;
      }

in flex-grow we specify in which ratio , they will divide space
        #one {
        flex-grow: 1;
      }
      #two {
        flex-grow: 2;
      }
      #three {
        flex-grow: 3;
      }

flex-shrink:
if there is no space in a row and we have not specified flex-wrap , then if we specify flex-shrink it will specify
which element to be shrinked more
the ratio in which an element should shrink 

 #one {
        flex-shrink: 3;
      }
      #two {
        flex-shrink: 2;
      }

flex-basis:
   #one {
        /* tells what to be the initial width */
        flex-basis: 300px;
      }

align-self:

      #one {
        align-self: flex-end;
      }
      #two {
        align-self: center;
      }
      #three {
        align-self: flex-start;
      }
==========================================
CSS Layout: 
CSS grid is the new layout model in css 
from oct 2017 all major browsers started supporting css grid 

Both Flexbox and css grid has its own importance and should be used for designing a web page
grid works for 2 dimensional alignment
Flexbox works on one dimensional , good for space distribution


grid columns: the vertical lines of grid items are called columns 
grid rows : the horizontal lines of grid items are called rows 
grid gap: the spaces between each column / row are called gaps 
grid lines : the lines between columns are called column lines , the lines between rows are called row lines 


        /* grid elements will be displayed one after other vertically */
        display: grid;
        /* grid elements will be displayed one after other but will depend on width on the content of grid element */
        display: inline-grid;


         /* to specify number of columns to be divided */
        grid-template-columns: 200px 400px;
        /* to display columns of same width */
        grid-template-columns: auto auto auto;

        /* we can specify in percentage also */
        grid-template-columns: auto 50% auto;
        grid-template-columns: auto 50% auto 50px;


               /* to give gap */
        grid-column-gap: 30px;
        /* grid-column-gap: is now column-gap  */
        grid-row-gap: 20px;
        /* grid-row-gap is now row gap */

        /* horizontal alignment */
        /* start is default */
        justify-content: start;
        justify-content: end;
        justify-content: center;
        justify-content: space-between;
        justify-content: space-around;
        justify-content: space-evenly;

        /* vertical alignment */
        align-content: start;
        align-content: end;
        align-content: center;
        align-content: space-around;
        align-content: space-between;
        align-content: space-evenly;


        grid element properties:

              /* grid properties on grid elements */
      #grid-1 {
        grid-column-start: 1;
        grid-column-end: 3;

        /* shortcut */
        grid-column: 1/3;

        grid-column: 1 / span 2;
      }
==========================================





