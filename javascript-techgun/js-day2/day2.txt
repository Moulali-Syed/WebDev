Program is a robot without hardware
Perform task withut human help


write a simple code in js file and link it
var a;
a = 2;
alert(a);

 <body>
    <script src="./script.js"></script>
  </body>

  ==================================================================
  comment in js
  two forward slash - // [single line comment]

  /*
  */ - [multi line comment]


comments will not be executed , helpful to comment while debugging or  we dont want to delete some code
  ==================================================================

  declartion of variable in javascript
    let, const , var 

    //declaring  a variable
var fname = 'Apple';
alert(fname);

var lname = fname + ' fruit';
console.log(lname);

instead of var , we have let and const from ES6
let - value can be changed after assigning
const -  value cannot be changed once assigned

for const if we decalre as below
const a;
we will get error as 'const' declarations must be initialized.

let b; // is valid


variable name can start with _ , $ ,letter
cannot use number at begining
cannot use reserved words
text can be writeen in '' or ""
let name = "Apple"; let name="banana";
we can declare two variables at a time
let x=5,y='tom';

  ==================================================================
javascript operators:
 assignment opertaor - =
 + , - , / , * , %
 += , -= , *= , /= , %=

 power :
 z = x**2;

 let x=5;
 let y=5;
 console.log(x+y);//10

 let x=5;//number
 let y='5';//string
 console.log(x+y); //55

 let a = "hello";
 let b = "world";
 console.log(a+" "+b);//hello world


 let x=5;
 x++;
 console.log(x);//6

 let x=5;
 x--;
 console.log(x);//4

 let x = 5;
 let z = x+5/5;
 console.log(z);//6
 follows BODMAS rule

  let x = 5;
 let z = (x+5)/5;
 console.log(z);//2

  ==================================================================
DataTypes in javascript

let x = 5+'5';


let x=5;
x = 'hello';
we can the DataType of the variable in javascript any number of times

let m = "hell'o";
let n = "Appl\"e";

boolean - true or false
let x = 2>3;//false
let y = 2<3;//true

//array
let x = ['apple','hello'];


//object
let man = {name:'apple', age:2};

//undefined - is also a DataType
let x;
console.log(x);//undefined

//we can know the type of data using typeof
let x2 = typeof 10;
let y2 = typeof 'apple';
console.log(x2 + ' ' + y2);  //number string

let m1 = 'hello';
console.log(typeof m1);//string


template literal:
let z1 = 'apple';
console.log(`hello ${z1}`); // works inside the `` symbol only

==================================================================
Comparison and logical opertaor:

1.==  [ignores datatype , checks only value]
5==5;//true
5=='5';//true
5==6;//false

console.log(5 == 5);
console.log(5 == '5');
console.log(5 == 6);
/*
true
true
false
*/

2.=== [ checks datatype and value]


3.!= [not equal]
    8!=5; //true
    5!=5; //false

4. !=== [not equal value or not equal type]
    5!==5 ;//false
    5!=='5';//true 
    5!==8; //true

5.greater than [>]
6.lessthan [<]
7.>=
8.<=


logical opertaors:
&&

(5<10 && 6>1); true
(5>10 && 6>1); false

||
(5==5 || 6==5);//true
(7==5 || 6==5);//false

![not]
!(6==5);//true

==================================================================
conditionals in javascript:

1.if
let age = 14;
if (age >= 12) {
  console.log('u can vote');
}

//if we have only one statment we can ignore curly brace
if (age > 10) console.log('hi');

2.if else
let age = 14;
if (age >= 12) {
  console.log('u can vote');
} else {
    console.log('u can not vote');
}


3.if else if

let age = 14;
let hasVoterCard = 'Yes';
if (age >= 12 && hasVoterCard == 'Yes') {
  console.log('u can vote');
} else if (age >= 12 && hasVoterCard != 'Yes') {
  console.log('get ur voter id card');
} else {
  console.log('u can not vote');
}

4.nested if

let age = 14;
let hasVoterCard = 'Yes';
if (age >= 12) {
  if (hasVoterCard == 'Yes') {
    console.log('u can vote');
  } else {
    console.log('get ur voter id card');
  }
} else {
  console.log('u can not vote');
}


5.ternary opertaor

let isLoggedIn = 0;
if (isLoggedIn == 0) {
  document.write('Login');
} else {
  document.write('LogOut');
}

let option = isLoggedIn == 1 ? 'LogOut' : 'Login';

6.nullsih coalescing operator[??]: - works on both null and undefined

i have defined 
let name;
alert(name);

I will get output as undefined , which iam expecting

to overcome this we have nullish coalescing operator [??] , if somevalue is undefined we can check it and give a value to it 

alert(name ?? 'GuestUser');

==================================================================
javascript switch statment:

say i have a condition as below

if input =1 or 'yes' or 'y' my output should be continue
if input = 0 or 'no' or 'n' my output should be break



let input = 1;
if (input === 1) {
  document.write('continue......');
} else if (input == 'y') {
  document.write('continue......');
} else if (input == 'yes') {
  document.write('continue......');
} else if (input == 'n') {
  document.write('break......');
} else if (input == 'no') {
  document.write('break......');
} else if (input === 0) {
  document.write('break......');
} else {
  document.write('wrong input');
}

switch (input) {
  case 1:
    document.write('continue......');
    break;
  case 'y':
    document.write('continue......');
    break;
  case 'yes':
    document.write('continue......');
    break;
  case 0:
    document.write('break.....');
    break;
  case 'n':
    document.write('break......');
    break;
  case 'no':
    document.write('break......');
    break;
  default:
    document.write('Wrong Input......');
}

we must use break; in switch statment , else it will execute all the remaining statments from whereever it it true
==================================================================