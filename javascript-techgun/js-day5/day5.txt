select element by id and inner HTML


  <body>
    <ul>
      <li>list1</li>
      <li id="first">list2</li>
      <li>list3</li>
    </ul>
    <script src="./script.js"></script>
  </body>

let element = document.getElementById('first');
console.log(element); //in console - <li id="first">list2</li>

let element1 = document.getElementById('first-1');
console.log(element1);// null  , because there is no element with id first-1


let element = document.getElementById('first');
console.log(element); //   <li id="first">list2</li>

console.log(element.innerHTML); //list2

element.innerHTML = '<p> helloworld </p>';  // this will chnage the content visible on the browser

let element1 = document.getElementById('first-1');
console.log(element1); //null

console.log(element1.innerHTML); //Uncaught TypeError: Cannot read properties of null (reading 'innerHTML')

===============================================================================================
How to select element by class in javascript:

let element = document.getElementsByClassName('cl');
console.log(element); //HTMLCollection(2)Â [li.cl, li.cl]
console.log(element.length); //2

for (let i = 0; i < element.length; i++) {
  element[i].innerHTML = '<p> Hello There !</p>';
}


  <body>
    <ul>
      <li class="cl">list1</li>
      <li id="first">list2</li>
      <li class="cl">list3</li>
    </ul>
    <script src="./script.js"></script>
  </body>

  =================================================================================
  select an element by tagName:

    <body>
    <ul>
      <li class="cl">list1</li>
      <li id="first">list2</li>
      <li class="cl">list3</li>
    </ul>
    <h2>Heading1</h2>
    <p>paragraph 1</p>
    <h2>Heading 2</h2>
    <p>paragraph 2</p>
    <h2>Heading 3</h2>
    <p>paragraph 3</p>
    <script src="./script.js"></script>
  </body>

  let elem = document.getElementsByTagName('h2');
for (let i = 0; i < elem.length; i++) {
  elem[i].innerHTML = ' hey there';
}


  <body>
    <ul>
      <li class="cl">list1</li>
      <li id="first">list2</li>
      <li class="cl">list3</li>
    </ul>
    <h2>Heading outside div</h2>
    <div id="div1">
      <h2>Heading1</h2>
      <p>paragraph 1</p>
      <h2>Heading 2</h2>
      <p>paragraph 2</p>
      <h2>Heading 3</h2>
      <p>paragraph 3</p>
    </div>
    <script src="./script.js"></script>
  </body>

  let div1 = document.getElementById('div1');
let elem = div1.getElementsByTagName('h2');
for (let i = 0; i < elem.length; i++) {
  elem[i].innerHTML = ' hey there';
}

=================================================================================

query selector:


<body>
    <h2 class="intro">Heading outside div</h2>
    <div id="div1">
      <p class="intro">paragraph 1</p>
      <h2 class="intro">Heading1</h2>
      <h2>Heading 2</h2>
      <p>paragraph 2</p>
      <h2>Heading 3</h2>
      <p class="intro">paragraph 3</p>
    </div>
    <script src="./script.js"></script>
  </body>


//querySelector - selects the first matching element
let elem = document.querySelector('p.intro');
console.log(elem);

=================================================================================
traversing elements in javascript:

  <body>
    <h2 class="intro">Heading 1</h2>
    <ul>
      <li id="intro">list1</li>
      <li>list2</li>
      <li>list3</li>
      <li>list4</li>
    </ul>
    <ul>
      <li>list a</li>
      <li>list b</li>
      <li>list c</li>
      <li>list d</li>
    </ul>
    <script src="./script.js"></script>
  </body>

let elem = document.getElementById('intro');
let prtElem = elem.parentElement;
console.log(elem); // <li id="intro">list1</li>
console.log(prtElem);
/*
<ul>
      <li id="intro">list1</li>
      <li>list2</li>
      <li>list3</li>
      <li>list4</li>
    </ul>
*/
prtElem.innerHTML = 'hello';

=================================================================================
change html with javascript:


let ele = document.getElementById('intro');
let content = ele.innerHTML;
console.log(content);
ele.innerHTML = '<h1>This is a heading </h1>';



=================================================
create and append element in javascript:

  <body>
    <div id="intro">
      <p id="p1">Hello this is a p tag</p>
    </div>
    <script src="./script.js"></script>
  </body>

let ele = document.getElementById('intro');
//create a tag
let h1 = document.createElement('h1');
let text = document.createTextNode('This is h1 tag');
h1.appendChild(text);
//append
ele.appendChild(h1);

//add a className
h1.className = 'cl1 cl2';
//add id
h1.id = 'intro1';

document.body.appendChild(h1);

//add text using a property
h1.textContent = 'Content added';

let para = document.getElementById('p1');
console.log(para.textContent);


<body>
    <ul id="list">
      <li>list 1</li>
      <li>list 2</li>
      <li>list 3</li>
      <li>list 4</li>
    </ul>
    <script src="./script.js"></script>
  </body>

  let list1 = document.getElementById('list');
let item = document.createElement('li');
item.textContent = 'New List 5';
list1.appendChild(item);

=================================================
Insert Before:

//till now using append we are adding at the last, to add at a particular position we can use
//insert before
let list1 = document.getElementById('list'); //parent
let item = document.createElement('li');
item.textContent = 'new list 5';
let pos = list1.firstElementChild;
list1.insertBefore(item, pos);//item - is what to be added , pos - is the position

<body>
    <ul id="list">
      <li>list 1</li>
      <li>list 2</li>
      <li>list 3</li>
      <li>list 4</li>
    </ul>
    <script src="./script.js"></script>
  </body>

  //till now using append we are adding at the last, to add at a particular position we can use
//insert before
let list1 = document.getElementById('list'); //parent
let item = document.createElement('li');
item.textContent = 'new list 5';
let pos = list1.firstElementChild.nextElementSibling;
list1.insertBefore(item, pos); //item - is what to be added , pos - is the position


//add at  top 
let parent = document.body;
let elm = document.createElement('h2');
elm.textContent = 'this is new element';
let list = document.getElementById('list');
parent.insertBefore(elm, list);
=================================================
Remove Child Element:

let parent = document.getElementById('menu');
let elm = parent.firstElementChild.nextElementSibling;
console.log(elm);
parent.removeChild(elm);

document.body.removeChild(parent);


<body>
    <ul id="menu">
      <li>Home</li>
      <li>Product</li>
      <li>About us</li>
    </ul>
    <script src="./script.js"></script>
  </body>


=================================================
clone or copy element in javascript:

let menu = document.getElementById('menu');
let cloneEle = menu.cloneNode(true); //if we pass true then it will create clone along with child
//if not passed true then child elements will not cloned
console.log(cloneEle);
cloneEle.id = 'mobile menu';
document.body.appendChild(cloneEle);

 <body>
    <ul id="menu">
      <li>Home</li>
      <li>Servcies</li>
      <li>Product</li>
      <li>About us</li>
    </ul>
    <script src="./script.js"></script>
  </body>

=================================================
replace element in javascript:

let parent = document.getElementById('menu');
let item = document.createElement('li');
item.textContent = 'Services';
let replace = parent.firstElementChild.nextElementSibling;
parent.replaceChild(item, replace);

 <body>
    <ul id="menu">
      <li>Home</li>
      <li>Product</li>
      <li>About us</li>
    </ul>
    <script src="./script.js"></script>
  </body>
=================================================

insert Adjacent HTML in javascript:
we can insert at 4 positions

<body>
    <!-- before begin -->
    <div id="intro">
      <!-- selected -->
      <!-- afterbegin -->
      <h2>Heading</h2>
      <p>This is a p tag</p>
      <!-- beforeend -->
    </div>
    <!-- afterend -->
    <script src="./script.js"></script>
  </body>

  let elm = document.getElementById('intro');
let html = '<h1>New h1</h1>';
elm.insertAdjacentHTML('beforebegin', html);
elm.insertAdjacentHTML('afterbegin', html);
elm.insertAdjacentHTML('beforeend', html);
elm.insertAdjacentHTML('afterend', html);
=================================================
Attribute:

 <body>
    <button id="btn">Send</button>
    <script src="./script.js"></script>
  </body>

let btn = document.getElementById('btn');
btn.setAttribute('name', 'form1');
btn.setAttribute('class', 'btnClass');

//to know value of attribute
let val = btn.getAttribute('name');
console.log(val);

//remove attribute
btn.removeAttribute('name');

//check attribute is present
console.log(btn.hasAttribute('name'));//return true or false based on presence

=================================================
chnage inline style:

1.
<body>
    <button id="btn">Send</button>
    <script src="./script.js"></script>
  </body>

  
let btn = document.getElementById('btn');
btn.style.cssText = 'background-color:red;color:white';

2.
using serAttribute

let btn = document.getElementById('btn');

btn.setAttribute('style', 'color:white;background-color:green');

3.
let btn = document.getElementById('btn');

btn.style.color = 'red';
btn.style.backgroundColor = 'pink';

4.
  <body>
    <button id="btn" style="color: blue">Send</button>
    <script src="./script.js"></script>
  </body>

let btn = document.getElementById('btn');
btn.style.cssText += 'backgroun:red;border:1px solid green';


=================================================
Get computed CSS: 

let btn = document.getElementById('btn');
let css = getComputedStyle(btn);
console.log(css.color);

 <style>
      #btn {
        background-color: red;
        color: white;
      }
    </style>
  </head>
  <body>
    <button id="btn">Send</button>
    <script src="./script.js"></script>
  </body>

=================================================
change css classes in javascript:


let box = document.getElementById('box');
console.log(box.className);
box.className += ' dim'; //add a class

//know list of class
console.log(box.classList);
for (let css of box.classList) {
  console.log(css);
}

box.classList.add('dim');
box.classList.remove('dim');
box.classList.replace('color', 'dim'); //what to remove , what to add
let result = box.classList.contains('color');
console.log(result);

let res1 = box.classList.toggle('dim');//if not added add, if present remove it

    <style>
      .color {
        background-color: grey;
        color: blue;
      }
      .dim {
        border: 1px solid red;
        padding: 100px;
      }
    </style>
  </head>
  <body>
    <div id="box" class="color dim">
      <p>This is dummy text</p>
    </div>
    <script src="./script.js"></script>
  </body>

=================================================
get height and width of element in javascript:

let box = document.getElementById('box');
let width = box.offsetWidth;//border will be considered
let height = box.offsetHeight;//border will be considered

console.log(width);
console.log(height);

let h1 = box.clientHeight;//border is not included
let w1 = box.clientWidth;//border is not included


    <style>
      .color {
        background-color: grey;
        color: blue;
      }
      .dim {
        border: 1px solid red;
        padding: 100px;
      }
    </style>
  </head>
  <body>
    <div id="box" class="color dim">
      <p>This is dummy text</p>
    </div>
    <script src="./script.js"></script>
  </body>

=================================================



=================================================