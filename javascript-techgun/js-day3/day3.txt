break, continue , nested loop

break - it will comes out of the loop when condition mentioned is correct

for (let counter = 1; counter <= 10; counter++) {
  if (counter == 5) {
    break;
  }

  console.log('Hello');
}


continue - it will skip the current iteration

for (let counter = 1; counter <= 10; counter++) {
  if (counter == 5) {
    continue;
  }

  console.log(`Hello ${counter}`);
}

//nested loop
for (let counter = 1; counter <= 10; counter++) {
  console.log(`Hello ${counter}`);
  for (let counter2 = 1; counter2 < 3; counter2++) {
    console.log(counter2);
  }
}


outer: for (let num = 1; num < 3; num++) {
  console.log(num);
  for (let num2 = 1; num2 <= 2; num2++) {
    if (num == 2) {
      break outer;
    }
    console.log(num2);
  }
}
==================================================================================================
alert , confirm ,prompt

functions to interact with user - alert , confirm , prompt
1.alert() - shows a message

2.prompt() - shows a message input text .it returns the text on ok or if cancel button or Esc is clicked returns null

3.confirm() - shows a message , confirm with ok or cancel , it returns true for ok and false for cancel/Esc

Note: All these pass script execution and dont allow the visitor to interact with the rest of the page until window has been dismissed


alert('hello world');



let age = prompt('Enter your age');

if (age != null && age != '') {
  document.write(`your age is ${age}`);
} else {
  document.write('age field is blank');
}

//if we want some default input to be shown in the input field
let age1 = prompt('Enter your age', 20);

if (age1 != null) {
  document.write(`your age is ${age1}`);
} else {
  document.write('age1 field is blank');
}


let response = confirm('Are you sure you want to delete?');

if (response) {
  document.write('deleted');
} else {
  document.write('Not deleted');
}

==================================================================================================
type conversion in javascript:


let type = 'hello';
alert(typeof type); //string

let type1 = 12;
alert(typeof type1); //number

let type2 = true;
alert(typeof type2); //boolean

//generally we get string as input in javascript

//type conversion
let type3 = 5 + null;
console.log(type3); //5
alert(typeof type3); //number

let type4 = '5' + null;
console.log(type4); //string
alert(typeof type4); //5null

let type5 = '5' + 2;
console.log(type5); //52
alert(typeof type5); //string

let type6 = '5' - 2;
console.log(type6); //3
alert(typeof type6); //number

let type7 = '5' * '2';
console.log(type7); //10
alert(typeof type7); //number

//only confusion is with + , with other operators it can figure out to convert to number or display NaN

let type8 = '5' * 'yes';
console.log(type8);//NaN
alert(typeof type8);//number



/*
1.String()
2.Number()
3.Boolean()
*/

let n1 = 4;
console.log(typeof n1); //number
let n2 = String(n1);
console.log(typeof n2); //string

let s1 = '32';
console.log(typeof s1); //string
let s2 = Number(s1);
console.log(typeof s2); //number

let s3 = 'hello';
console.log(typeof s3); //string
let s4 = Number(s3);
console.log(s4); //NaN
console.log(typeof s4); //number

console.log('=============');
let b1 = true;
console.log(typeof b1); //boolean
let b2 = Number(b1);
console.log(b2); //1
console.log(typeof b2); //number

let b3 = false;
console.log(typeof b3); //boolean
let b4 = Number(b3);
console.log(b4); //0
console.log(typeof b4); //number

console.log('============');
let num1 = 32;
console.log(typeof num1); //number
let num2 = Boolean(num1);
console.log(num2); //true
console.log(typeof num2); //boolean

let num3 = 0;
console.log(typeof num3); //number
let num4 = Boolean(num3);
console.log(num4); //false
console.log(typeof num4); //boolean

console.log('----------');
let st1 = '';
let st2 = Boolean(st1);
console.log(typeof st2 + ' ' + st2); //boolean false

let st3 = 'apple';
let st4 = Boolean(st3);
console.log(typeof st4 + ' ' + st4); //boolean true


==================================================================================================
String manipulation:

1.
let str = 'Moulali';
//template literal
let greet = `Hello ${str}`;
console.log(greet);

2.
//New line character
let str = 'Moulali \n Syed';
console.log(str);
/*
Moulali 
 Syed
*/

//tab space

let str2 = 'Moulali\tSyed';
console.log(str2);

3.
//use backslash to ignore
let str = 'Moulali\\Syed';
console.log(str);

let str2 = 'Moulali "Syed';

4.
//to know length of string
let str = 'Moulali';
console.log(str.length); //7

//index starts from 0
console.log(str[3]); //l

5.
//concatenate string
let str1 = 'Moulali';
let str2 = 'Syed';
console.log(str1 + ' ' + str2);

6.
//string comparision - js is case sensitive
let str = 'Moulali';
if ('Moulali' == str) {
  console.log('Equal');
} else {
  console.log('Not equal');
}


7.
//concat operator
let str = 'apple';
let st2 = 'fruit';
let st3 = str.concat(st2);
console.log(st3);
let st4 = str.concat(" ", st2);
console.log(st4);

8.

//substring
let str = 'This is javascript tutorial. It is a good tutorial';
let substr = str.substr(8, 19); //8 is start character ,  19 is the length of string from 8th charcater
console.log(substr); //javascript tutorial

//substring
let st1 = 'This is javascript tutorial. It is a good tutorial';
let substring = st1.substring(8, 18);// 8 is start charcater , 18 is the end charcater index value
console.log(substring);//javascript

9.
//to know from where a character or word is
let str = 'This is javascript tutorial. It is a good tutorial';
let position = str.indexOf('good');
console.log(position); //37

//if 2 are there then it will return first match

let pos = str.indexOf('is', 10); //check 'is' from 10th index position
console.log(pos);

let pos2 = str.lastIndexOf('is'); //checks from back
console.log(pos);

let pos3 = str.lastIndexOf('z');
console.log(pos3); //-1 which means it is not present in the string
let pos4 = str.indexOf('x');
console.log(pos4); //-1

10.
//trim -  remove spaces from front and back
let str = '     This is javascript tutorial. It is a good tutorial    ';

console.log(str.trim());
console.log(str);

//to remove space from start
console.log(str.trimStart());
//remove space from end
console.log(str.trimEnd());


11.
//upper case and lowercase
let str = 'This is javascript tutorial. It is a good tutorial';
console.log(str.toUpperCase());
console.log(str.toLowerCase());

12.
//replace
let str = 'This is javascript tutorial. It is a good tutorial';
let newStr = str.replace('good', 'best');
console.log(str);
console.log(newStr);
// This is javascript tutorial. It is a good tutorial
// This is javascript tutorial. It is a best tutorial

13.
let str = 'This is javascript tutorial. It is a good tutorial';
let str1 = str.includes('html');
console.log(str1); //false

let str2 = str.includes('javascript');
console.log(str2);//true

==================================================================================================
Array:
let book1 = 'Math';
let book2 = 'Physics';
let book3 = 'Chemistry';
let book4 = 'Javascript';

console.log(book3);

//array - we can store all variables in one
let books = ['Math', 'physics', 'chemistry', 'javascript']; //2 ways to declare array
console.log(books); //[ 'Math', 'physics', 'chemistry', 'javascript' ]

let books1 = new Array('Math', 'phsics', 'chemistry', 'javascript');

//access using the index - starts from 0
console.log(books[1]); //physics

let asset = [1, 3, 40, 100.1, 'math'];
console.log(asset[3]); // 100.1

//change an element in array
asset[2] = 'hi';
console.log(asset); //[ 1, 3, 'hi', 100.1, 'math' ]

==================================================================================================

operations on array:
1.
//find length of array
let book = ['Maths', 'Physics', 'Chemistry', 'Bio'];
console.log(book.length); //4

2.
//add element at the end of array - use push
let book = ['Maths', 'Physics', 'Chemistry', 'Bio'];
book.push('Hindi');
console.log(book);//[ 'Maths', 'Physics', 'Chemistry', 'Bio', 'Hindi' ]

3.
//add element at the first of array - use unshift
let book = ['Maths', 'Physics', 'Chemistry', 'Bio'];
book.unshift('Hindi');
console.log(book);//[ 'Hindi', 'Maths', 'Physics', 'Chemistry', 'Bio' ]

4.
//remove element at the last of array - use pop
let book = ['Maths', 'Physics', 'Chemistry', 'Bio'];
book.pop();
console.log(book); //[ 'Maths', 'Physics', 'Chemistry' ]

5.
//remove element at the specified index - use splice
let book = ['Maths', 'Physics', 'Chemistry', 'Bio'];
book.splice(1, 1); //[1 - is index position , 1 - is count of elements]
console.log(book); //[ 'Maths', 'Chemistry', 'Bio' ]

6.
//empty an array
let book = ['Maths', 'Physics', 'Chemistry', 'Bio'];
book = []; //method1
book.length = 0; //method2
console.log(book); //[]

7.
//know index position of element
let book = ['Maths', 'Physics', 'Chemistry', 'Bio'];
let position = book.indexOf('Bio');
console.log(position); //3

8.
//check if given variable is array
let book = ['Maths', 'Physics', 'Chemistry', 'Bio'];
let book1 = 'Math';
console.log(Array.isArray(book1)); //false
console.log(Array.isArray(book));//true

9.
//using split to convert text to array elements
let text = 'This is a random text';
let wordarray = text.split(' ');
console.log(wordarray); //[ 'This', 'is', 'a', 'random', 'text' ]

let warr = text.split('s');
console.log(warr); //[ 'Thi', ' i', ' a random text' ]

10.
//join array elements
let book = ['math', 'phsics', 'bio', 'computer science'];
let warr = book.join(' ');
console.log(warr); //math phsics bio computer science

11.
//join multiple array
let book = ['math', 'phsics', 'bio', 'computer science'];
let book2 = ['hindi', 'english', 'french'];
let newBook = book.concat(book2);
console.log(newBook);
/*
[
  'math',
  'phsics',
  'bio',
  'computer science',
  'hindi',
  'english',
  'french'
]
*/

12.
//multi dimensional array
let book = ['math', 'phsics', 'bio', 'computer science'];
let bookWithPages = [
  ['Math', '300'],
  ['physics', 321],
  ['bio', '356'],
];

console.log(bookWithPages[0][1]); //300
console.log(bookWithPages[2][0]); //bio
console.log(bookWithPages[1]); //[physics,321]

13.

//iterate array using for
let book = ['math', 'phsics', 'bio', 'computer science'];
for (let count = 0; count < book.length; count++) {
  console.log(book[count]);
}
/*
math
phsics
bio
computer science
*/

14.
//iterate array using forEach
let book = ['math', 'phsics', 'bio', 'computer science'];
book.forEach(myfun);

function myfun(value) {
  console.log(value);
}
/*
math
phsics
bio
computer science
*/

book.forEach((val) => console.log(val));
/*
math
phsics
bio
computer science
*/


========================================================================================
functions in javascript:
/*
we have user defind and predfined functions

predefined like alert();
*/

function mulTab(num) {
  for (let i = 1; i <= 10; i++) {
    console.log(`${num}*${i} = ${num * i}`);
  }
}

mulTab(2);

/*
2*1 = 2
2*2 = 4
2*3 = 6
2*4 = 8
2*5 = 10
2*6 = 12
2*7 = 14
2*8 = 16
2*9 = 18
2*10 = 20
*/
========================================================================================
parameters and arguments in javascript:

function mulTab(num) {
  for (let i = 1; i <= 10; i++) {
    console.log(`${num}*${i} = ${num * i}`);
  }
}

mulTab(2);

num - is parameter
2 - is argument 


function add(num1, num2) {
  console.log(num1 + num2);
}

add(2, 3); //5

num1,num2 are parameters
2,3 are arguments 

========================================================================================

//arguments object - we have arguments inside a function by default ,we can pass any number of arguments
function add() {
  console.log(arguments);
  console.log(arguments.length);
}

add(5, 7);

/*
[Arguments] { '0': 5, '1': 7 }
2
*/



function add() {
  console.log(arguments[1]);
  console.log(arguments[3]);
}

add(5, 7, 8);

/*
7
undefined
*/

function add() {
  if (arguments.length == 0) {
    console.log('No arguments passed!');
  } else {
    let sum = 0;
    for (let i = 0; i < arguments.length; i++) {
      sum += arguments[i];
    }
    console.log(sum);
  }
}

add(5, 7, 8);

/*
20
*/


========================================================================================
function add() {
  if (arguments.length == 0) {
    console.log('No parameters passed!');
  } else {
    let sum = 0;
    for (let i = 0; i < arguments.length; i++) {
      sum += arguments[i];
    }
    console.log(sum);
  }
}

//now we are storing function inside a variable ,now we can call function using variable name also
let addition = add;
addition(5, 3);
/*
8
*/


========================================================================================
//return a value in javascript

function add(a, b) {
  return a + b;
}

let sum = add(2, 3);
console.log(sum);
//5

//if we are returning any value from function , by default it returns undefined


function add(a, b) {
  let d = [2, 3, 4];
  return d;
}

let c = add(2, 3);
console.log(c);
//[ 2, 3, 4 ]


function compare(a, b) {
  if (a > b) {
    return 1;
  } else if (b > a) {
    return -1;
  } else {
    return 0;
  }
}
let res = compare(5, 6);
console.log(res);
========================================================================================
//global vs local variable
let car = 'audi'; //global varibale
function add() {
  let res = 33; //local variable
  console.log(res);
}
add();
//local variable can used inside the function in which it is defined , if tried accessing outside gives error as it is not defined
//global variable can be used inside function and outside
//variable  inside a function is local varibale,variable outside a function is global variable


========================================================================================
anonymous function:
function without a name 

//function expression - assigning a function to a variable
let show = function () {
  console.log('hello');
};
show();

function show() {
  console.log('hello world');
}
setTimeout(show, 3000); //executes show function after 3 seconds

//for suppose i want to use function only once
setTimeout(function () {
  console.log('hello!!');
}, 3000);
========================================================================================
//Immediately Invoked function - IIFE
//we want a function to get executed as we write
let fun = function () {
  console.log('helo');
  //   alert('hello');
};
fun();

(function () {
  console.log('hello from IIFE');
})();


========================================================================================



========================================================================================



========================================================================================